package storage

import (
	"context"
	"fmt"
	"time"
	"github.com/Alexandrhub/cli-orm-gen/db/adapter"
	"github.com/Alexandrhub/cli-orm-gen/genstorage/models"
	"github.com/Alexandrhub/cli-orm-gen/utils"
)

type {{ .EntityNameUppercase }}Storage struct {
    dto dao.DAO
}

func New{{ .EntityNameUppercase}}Storage(dto dao.DAO) {{ .EntityNameUppercase }}Storage {
    return {{ .EntityNameUppercase }}Storage{dto: dto}
}

func ({{ .EntityFirstLetter }} *{{ .EntityNameUppercase }}Storage) Create(ctx context.Context, dto models.{{ .EntityName }}) error {
    return {{ .EntityFirstLetter }}.dto.Create(ctx, &dto)
}

func ({{ .EntityFirstLetter }} *{{ .EntityNameUppercase }}Storage) Upsert(ctx context.Context, dto []models.{{ .EntityName }}) error {
    var entities []scanner.Tabler
    for _, d := range dto {
    		entities = append(entities, &d)
    	}

	return {{ .EntityFirstLetter }}.dto.Upsert(
		ctx,
		entities,
	)
}

func ({{ .EntityFirstLetter }} *{{ .EntityNameUppercase }}Storage) GetCount(ctx context.Context, dto models.{{ .EntityName }}, condition utils.Condition) (uint64, error) {
	var count uint64
	count, err := {{ .EntityFirstLetter }}.dto.GetCount(ctx, &dto, condition)
	if err != nil {
		return 0,  fmt.Errorf("{{ .EntityNameLowercase }} storage: GetCount not found")
	}

	return count, nil
}

func ({{ .EntityFirstLetter }} *{{ .EntityNameUppercase }}Storage) List(ctx context.Context, condition utils.Condition) ([]models.{{ .EntityName }}, error) {
	var list []models.{{ .EntityName }}
	var table models.{{ .EntityName }}
	err := {{ .EntityFirstLetter }}.dto.List(ctx, &list, &table, condition)
	if err != nil {
		return nil, err
	}

	return list, nil
}

func ({{ .EntityFirstLetter }} *{{ .EntityNameUppercase }}Storage) Update(ctx context.Context, dto models.{{ .EntityName }}, condition utils.Condition) error {
	return {{ .EntityFirstLetter }}.dto.Update(
		ctx,
		&dto,
		condition,
		"update",
	)
}